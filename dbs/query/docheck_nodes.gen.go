// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"check_vpn/dbs/model"
)

func newDocheckNode(db *gorm.DB, opts ...gen.DOOption) docheckNode {
	_docheckNode := docheckNode{}

	_docheckNode.docheckNodeDo.UseDB(db, opts...)
	_docheckNode.docheckNodeDo.UseModel(&model.DocheckNode{})

	tableName := _docheckNode.docheckNodeDo.TableName()
	_docheckNode.ALL = field.NewAsterisk(tableName)
	_docheckNode.ID = field.NewInt64(tableName, "id")
	_docheckNode.Name = field.NewString(tableName, "name")
	_docheckNode.IP = field.NewString(tableName, "ip")
	_docheckNode.City = field.NewString(tableName, "city")
	_docheckNode.CreatedAt = field.NewTime(tableName, "created_at")
	_docheckNode.UpdatedAt = field.NewTime(tableName, "updated_at")

	_docheckNode.fillFieldMap()

	return _docheckNode
}

type docheckNode struct {
	docheckNodeDo docheckNodeDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String
	IP        field.String
	City      field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (d docheckNode) Table(newTableName string) *docheckNode {
	d.docheckNodeDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d docheckNode) As(alias string) *docheckNode {
	d.docheckNodeDo.DO = *(d.docheckNodeDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *docheckNode) updateTableName(table string) *docheckNode {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Name = field.NewString(table, "name")
	d.IP = field.NewString(table, "ip")
	d.City = field.NewString(table, "city")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *docheckNode) WithContext(ctx context.Context) IDocheckNodeDo {
	return d.docheckNodeDo.WithContext(ctx)
}

func (d docheckNode) TableName() string { return d.docheckNodeDo.TableName() }

func (d docheckNode) Alias() string { return d.docheckNodeDo.Alias() }

func (d *docheckNode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *docheckNode) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["id"] = d.ID
	d.fieldMap["name"] = d.Name
	d.fieldMap["ip"] = d.IP
	d.fieldMap["city"] = d.City
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d docheckNode) clone(db *gorm.DB) docheckNode {
	d.docheckNodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d docheckNode) replaceDB(db *gorm.DB) docheckNode {
	d.docheckNodeDo.ReplaceDB(db)
	return d
}

type docheckNodeDo struct{ gen.DO }

type IDocheckNodeDo interface {
	gen.SubQuery
	Debug() IDocheckNodeDo
	WithContext(ctx context.Context) IDocheckNodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDocheckNodeDo
	WriteDB() IDocheckNodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDocheckNodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDocheckNodeDo
	Not(conds ...gen.Condition) IDocheckNodeDo
	Or(conds ...gen.Condition) IDocheckNodeDo
	Select(conds ...field.Expr) IDocheckNodeDo
	Where(conds ...gen.Condition) IDocheckNodeDo
	Order(conds ...field.Expr) IDocheckNodeDo
	Distinct(cols ...field.Expr) IDocheckNodeDo
	Omit(cols ...field.Expr) IDocheckNodeDo
	Join(table schema.Tabler, on ...field.Expr) IDocheckNodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDocheckNodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDocheckNodeDo
	Group(cols ...field.Expr) IDocheckNodeDo
	Having(conds ...gen.Condition) IDocheckNodeDo
	Limit(limit int) IDocheckNodeDo
	Offset(offset int) IDocheckNodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDocheckNodeDo
	Unscoped() IDocheckNodeDo
	Create(values ...*model.DocheckNode) error
	CreateInBatches(values []*model.DocheckNode, batchSize int) error
	Save(values ...*model.DocheckNode) error
	First() (*model.DocheckNode, error)
	Take() (*model.DocheckNode, error)
	Last() (*model.DocheckNode, error)
	Find() ([]*model.DocheckNode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DocheckNode, err error)
	FindInBatches(result *[]*model.DocheckNode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DocheckNode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDocheckNodeDo
	Assign(attrs ...field.AssignExpr) IDocheckNodeDo
	Joins(fields ...field.RelationField) IDocheckNodeDo
	Preload(fields ...field.RelationField) IDocheckNodeDo
	FirstOrInit() (*model.DocheckNode, error)
	FirstOrCreate() (*model.DocheckNode, error)
	FindByPage(offset int, limit int) (result []*model.DocheckNode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDocheckNodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d docheckNodeDo) Debug() IDocheckNodeDo {
	return d.withDO(d.DO.Debug())
}

func (d docheckNodeDo) WithContext(ctx context.Context) IDocheckNodeDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d docheckNodeDo) ReadDB() IDocheckNodeDo {
	return d.Clauses(dbresolver.Read)
}

func (d docheckNodeDo) WriteDB() IDocheckNodeDo {
	return d.Clauses(dbresolver.Write)
}

func (d docheckNodeDo) Session(config *gorm.Session) IDocheckNodeDo {
	return d.withDO(d.DO.Session(config))
}

func (d docheckNodeDo) Clauses(conds ...clause.Expression) IDocheckNodeDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d docheckNodeDo) Returning(value interface{}, columns ...string) IDocheckNodeDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d docheckNodeDo) Not(conds ...gen.Condition) IDocheckNodeDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d docheckNodeDo) Or(conds ...gen.Condition) IDocheckNodeDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d docheckNodeDo) Select(conds ...field.Expr) IDocheckNodeDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d docheckNodeDo) Where(conds ...gen.Condition) IDocheckNodeDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d docheckNodeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDocheckNodeDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d docheckNodeDo) Order(conds ...field.Expr) IDocheckNodeDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d docheckNodeDo) Distinct(cols ...field.Expr) IDocheckNodeDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d docheckNodeDo) Omit(cols ...field.Expr) IDocheckNodeDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d docheckNodeDo) Join(table schema.Tabler, on ...field.Expr) IDocheckNodeDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d docheckNodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDocheckNodeDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d docheckNodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IDocheckNodeDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d docheckNodeDo) Group(cols ...field.Expr) IDocheckNodeDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d docheckNodeDo) Having(conds ...gen.Condition) IDocheckNodeDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d docheckNodeDo) Limit(limit int) IDocheckNodeDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d docheckNodeDo) Offset(offset int) IDocheckNodeDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d docheckNodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDocheckNodeDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d docheckNodeDo) Unscoped() IDocheckNodeDo {
	return d.withDO(d.DO.Unscoped())
}

func (d docheckNodeDo) Create(values ...*model.DocheckNode) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d docheckNodeDo) CreateInBatches(values []*model.DocheckNode, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d docheckNodeDo) Save(values ...*model.DocheckNode) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d docheckNodeDo) First() (*model.DocheckNode, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocheckNode), nil
	}
}

func (d docheckNodeDo) Take() (*model.DocheckNode, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocheckNode), nil
	}
}

func (d docheckNodeDo) Last() (*model.DocheckNode, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocheckNode), nil
	}
}

func (d docheckNodeDo) Find() ([]*model.DocheckNode, error) {
	result, err := d.DO.Find()
	return result.([]*model.DocheckNode), err
}

func (d docheckNodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DocheckNode, err error) {
	buf := make([]*model.DocheckNode, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d docheckNodeDo) FindInBatches(result *[]*model.DocheckNode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d docheckNodeDo) Attrs(attrs ...field.AssignExpr) IDocheckNodeDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d docheckNodeDo) Assign(attrs ...field.AssignExpr) IDocheckNodeDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d docheckNodeDo) Joins(fields ...field.RelationField) IDocheckNodeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d docheckNodeDo) Preload(fields ...field.RelationField) IDocheckNodeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d docheckNodeDo) FirstOrInit() (*model.DocheckNode, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocheckNode), nil
	}
}

func (d docheckNodeDo) FirstOrCreate() (*model.DocheckNode, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocheckNode), nil
	}
}

func (d docheckNodeDo) FindByPage(offset int, limit int) (result []*model.DocheckNode, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d docheckNodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d docheckNodeDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d docheckNodeDo) Delete(models ...*model.DocheckNode) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *docheckNodeDo) withDO(do gen.Dao) *docheckNodeDo {
	d.DO = *do.(*gen.DO)
	return d
}
