// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"check_vpn/dbs/model"
)

func newCheckNode(db *gorm.DB, opts ...gen.DOOption) checkNode {
	_checkNode := checkNode{}

	_checkNode.checkNodeDo.UseDB(db, opts...)
	_checkNode.checkNodeDo.UseModel(&model.CheckNode{})

	tableName := _checkNode.checkNodeDo.TableName()
	_checkNode.ALL = field.NewAsterisk(tableName)
	_checkNode.ID = field.NewInt64(tableName, "id")
	_checkNode.Host = field.NewString(tableName, "host")
	_checkNode.ListPath = field.NewString(tableName, "list_path")
	_checkNode.LimitWait = field.NewInt64(tableName, "limit_wait")
	_checkNode.NodeType = field.NewString(tableName, "node_type")
	_checkNode.ReqEncode = field.NewString(tableName, "req_encode")
	_checkNode.ReqEncodeKey = field.NewString(tableName, "req_encode_key")
	_checkNode.CreatedAt = field.NewTime(tableName, "created_at")
	_checkNode.UpdatedAt = field.NewTime(tableName, "updated_at")
	_checkNode.IsShow = field.NewInt64(tableName, "is_show")

	_checkNode.fillFieldMap()

	return _checkNode
}

type checkNode struct {
	checkNodeDo checkNodeDo

	ALL          field.Asterisk
	ID           field.Int64
	Host         field.String
	ListPath     field.String
	LimitWait    field.Int64
	NodeType     field.String
	ReqEncode    field.String
	ReqEncodeKey field.String
	CreatedAt    field.Time
	UpdatedAt    field.Time
	IsShow       field.Int64

	fieldMap map[string]field.Expr
}

func (c checkNode) Table(newTableName string) *checkNode {
	c.checkNodeDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c checkNode) As(alias string) *checkNode {
	c.checkNodeDo.DO = *(c.checkNodeDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *checkNode) updateTableName(table string) *checkNode {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Host = field.NewString(table, "host")
	c.ListPath = field.NewString(table, "list_path")
	c.LimitWait = field.NewInt64(table, "limit_wait")
	c.NodeType = field.NewString(table, "node_type")
	c.ReqEncode = field.NewString(table, "req_encode")
	c.ReqEncodeKey = field.NewString(table, "req_encode_key")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.IsShow = field.NewInt64(table, "is_show")

	c.fillFieldMap()

	return c
}

func (c *checkNode) WithContext(ctx context.Context) ICheckNodeDo {
	return c.checkNodeDo.WithContext(ctx)
}

func (c checkNode) TableName() string { return c.checkNodeDo.TableName() }

func (c checkNode) Alias() string { return c.checkNodeDo.Alias() }

func (c *checkNode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *checkNode) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["host"] = c.Host
	c.fieldMap["list_path"] = c.ListPath
	c.fieldMap["limit_wait"] = c.LimitWait
	c.fieldMap["node_type"] = c.NodeType
	c.fieldMap["req_encode"] = c.ReqEncode
	c.fieldMap["req_encode_key"] = c.ReqEncodeKey
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["is_show"] = c.IsShow
}

func (c checkNode) clone(db *gorm.DB) checkNode {
	c.checkNodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c checkNode) replaceDB(db *gorm.DB) checkNode {
	c.checkNodeDo.ReplaceDB(db)
	return c
}

type checkNodeDo struct{ gen.DO }

type ICheckNodeDo interface {
	gen.SubQuery
	Debug() ICheckNodeDo
	WithContext(ctx context.Context) ICheckNodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICheckNodeDo
	WriteDB() ICheckNodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICheckNodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICheckNodeDo
	Not(conds ...gen.Condition) ICheckNodeDo
	Or(conds ...gen.Condition) ICheckNodeDo
	Select(conds ...field.Expr) ICheckNodeDo
	Where(conds ...gen.Condition) ICheckNodeDo
	Order(conds ...field.Expr) ICheckNodeDo
	Distinct(cols ...field.Expr) ICheckNodeDo
	Omit(cols ...field.Expr) ICheckNodeDo
	Join(table schema.Tabler, on ...field.Expr) ICheckNodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICheckNodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICheckNodeDo
	Group(cols ...field.Expr) ICheckNodeDo
	Having(conds ...gen.Condition) ICheckNodeDo
	Limit(limit int) ICheckNodeDo
	Offset(offset int) ICheckNodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckNodeDo
	Unscoped() ICheckNodeDo
	Create(values ...*model.CheckNode) error
	CreateInBatches(values []*model.CheckNode, batchSize int) error
	Save(values ...*model.CheckNode) error
	First() (*model.CheckNode, error)
	Take() (*model.CheckNode, error)
	Last() (*model.CheckNode, error)
	Find() ([]*model.CheckNode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CheckNode, err error)
	FindInBatches(result *[]*model.CheckNode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CheckNode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICheckNodeDo
	Assign(attrs ...field.AssignExpr) ICheckNodeDo
	Joins(fields ...field.RelationField) ICheckNodeDo
	Preload(fields ...field.RelationField) ICheckNodeDo
	FirstOrInit() (*model.CheckNode, error)
	FirstOrCreate() (*model.CheckNode, error)
	FindByPage(offset int, limit int) (result []*model.CheckNode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICheckNodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c checkNodeDo) Debug() ICheckNodeDo {
	return c.withDO(c.DO.Debug())
}

func (c checkNodeDo) WithContext(ctx context.Context) ICheckNodeDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c checkNodeDo) ReadDB() ICheckNodeDo {
	return c.Clauses(dbresolver.Read)
}

func (c checkNodeDo) WriteDB() ICheckNodeDo {
	return c.Clauses(dbresolver.Write)
}

func (c checkNodeDo) Session(config *gorm.Session) ICheckNodeDo {
	return c.withDO(c.DO.Session(config))
}

func (c checkNodeDo) Clauses(conds ...clause.Expression) ICheckNodeDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c checkNodeDo) Returning(value interface{}, columns ...string) ICheckNodeDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c checkNodeDo) Not(conds ...gen.Condition) ICheckNodeDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c checkNodeDo) Or(conds ...gen.Condition) ICheckNodeDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c checkNodeDo) Select(conds ...field.Expr) ICheckNodeDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c checkNodeDo) Where(conds ...gen.Condition) ICheckNodeDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c checkNodeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICheckNodeDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c checkNodeDo) Order(conds ...field.Expr) ICheckNodeDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c checkNodeDo) Distinct(cols ...field.Expr) ICheckNodeDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c checkNodeDo) Omit(cols ...field.Expr) ICheckNodeDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c checkNodeDo) Join(table schema.Tabler, on ...field.Expr) ICheckNodeDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c checkNodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICheckNodeDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c checkNodeDo) RightJoin(table schema.Tabler, on ...field.Expr) ICheckNodeDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c checkNodeDo) Group(cols ...field.Expr) ICheckNodeDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c checkNodeDo) Having(conds ...gen.Condition) ICheckNodeDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c checkNodeDo) Limit(limit int) ICheckNodeDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c checkNodeDo) Offset(offset int) ICheckNodeDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c checkNodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckNodeDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c checkNodeDo) Unscoped() ICheckNodeDo {
	return c.withDO(c.DO.Unscoped())
}

func (c checkNodeDo) Create(values ...*model.CheckNode) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c checkNodeDo) CreateInBatches(values []*model.CheckNode, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c checkNodeDo) Save(values ...*model.CheckNode) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c checkNodeDo) First() (*model.CheckNode, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckNode), nil
	}
}

func (c checkNodeDo) Take() (*model.CheckNode, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckNode), nil
	}
}

func (c checkNodeDo) Last() (*model.CheckNode, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckNode), nil
	}
}

func (c checkNodeDo) Find() ([]*model.CheckNode, error) {
	result, err := c.DO.Find()
	return result.([]*model.CheckNode), err
}

func (c checkNodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CheckNode, err error) {
	buf := make([]*model.CheckNode, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c checkNodeDo) FindInBatches(result *[]*model.CheckNode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c checkNodeDo) Attrs(attrs ...field.AssignExpr) ICheckNodeDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c checkNodeDo) Assign(attrs ...field.AssignExpr) ICheckNodeDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c checkNodeDo) Joins(fields ...field.RelationField) ICheckNodeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c checkNodeDo) Preload(fields ...field.RelationField) ICheckNodeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c checkNodeDo) FirstOrInit() (*model.CheckNode, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckNode), nil
	}
}

func (c checkNodeDo) FirstOrCreate() (*model.CheckNode, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckNode), nil
	}
}

func (c checkNodeDo) FindByPage(offset int, limit int) (result []*model.CheckNode, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c checkNodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c checkNodeDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c checkNodeDo) Delete(models ...*model.CheckNode) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *checkNodeDo) withDO(do gen.Dao) *checkNodeDo {
	c.DO = *do.(*gen.DO)
	return c
}
