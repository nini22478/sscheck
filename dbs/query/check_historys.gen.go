// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"check_vpn/dbs/model"
)

func newCheckHistory(db *gorm.DB, opts ...gen.DOOption) checkHistory {
	_checkHistory := checkHistory{}

	_checkHistory.checkHistoryDo.UseDB(db, opts...)
	_checkHistory.checkHistoryDo.UseModel(&model.CheckHistory{})

	tableName := _checkHistory.checkHistoryDo.TableName()
	_checkHistory.ALL = field.NewAsterisk(tableName)
	_checkHistory.ID = field.NewInt64(tableName, "id")
	_checkHistory.DonodeID = field.NewInt64(tableName, "donode_id")
	_checkHistory.NodeID = field.NewInt64(tableName, "node_id")
	_checkHistory.IP = field.NewString(tableName, "ip")
	_checkHistory.PingLong = field.NewFloat32(tableName, "ping_long")
	_checkHistory.NodeLong = field.NewFloat32(tableName, "node_long")
	_checkHistory.APILong = field.NewFloat32(tableName, "api_long")
	_checkHistory.CreatedAt = field.NewTime(tableName, "created_at")
	_checkHistory.UpdatedAt = field.NewTime(tableName, "updated_at")

	_checkHistory.fillFieldMap()

	return _checkHistory
}

type checkHistory struct {
	checkHistoryDo checkHistoryDo

	ALL       field.Asterisk
	ID        field.Int64
	DonodeID  field.Int64
	NodeID    field.Int64
	IP        field.String
	PingLong  field.Float32
	NodeLong  field.Float32
	APILong   field.Float32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (c checkHistory) Table(newTableName string) *checkHistory {
	c.checkHistoryDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c checkHistory) As(alias string) *checkHistory {
	c.checkHistoryDo.DO = *(c.checkHistoryDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *checkHistory) updateTableName(table string) *checkHistory {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.DonodeID = field.NewInt64(table, "donode_id")
	c.NodeID = field.NewInt64(table, "node_id")
	c.IP = field.NewString(table, "ip")
	c.PingLong = field.NewFloat32(table, "ping_long")
	c.NodeLong = field.NewFloat32(table, "node_long")
	c.APILong = field.NewFloat32(table, "api_long")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *checkHistory) WithContext(ctx context.Context) ICheckHistoryDo {
	return c.checkHistoryDo.WithContext(ctx)
}

func (c checkHistory) TableName() string { return c.checkHistoryDo.TableName() }

func (c checkHistory) Alias() string { return c.checkHistoryDo.Alias() }

func (c *checkHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *checkHistory) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["donode_id"] = c.DonodeID
	c.fieldMap["node_id"] = c.NodeID
	c.fieldMap["ip"] = c.IP
	c.fieldMap["ping_long"] = c.PingLong
	c.fieldMap["node_long"] = c.NodeLong
	c.fieldMap["api_long"] = c.APILong
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c checkHistory) clone(db *gorm.DB) checkHistory {
	c.checkHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c checkHistory) replaceDB(db *gorm.DB) checkHistory {
	c.checkHistoryDo.ReplaceDB(db)
	return c
}

type checkHistoryDo struct{ gen.DO }

type ICheckHistoryDo interface {
	gen.SubQuery
	Debug() ICheckHistoryDo
	WithContext(ctx context.Context) ICheckHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICheckHistoryDo
	WriteDB() ICheckHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICheckHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICheckHistoryDo
	Not(conds ...gen.Condition) ICheckHistoryDo
	Or(conds ...gen.Condition) ICheckHistoryDo
	Select(conds ...field.Expr) ICheckHistoryDo
	Where(conds ...gen.Condition) ICheckHistoryDo
	Order(conds ...field.Expr) ICheckHistoryDo
	Distinct(cols ...field.Expr) ICheckHistoryDo
	Omit(cols ...field.Expr) ICheckHistoryDo
	Join(table schema.Tabler, on ...field.Expr) ICheckHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICheckHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICheckHistoryDo
	Group(cols ...field.Expr) ICheckHistoryDo
	Having(conds ...gen.Condition) ICheckHistoryDo
	Limit(limit int) ICheckHistoryDo
	Offset(offset int) ICheckHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckHistoryDo
	Unscoped() ICheckHistoryDo
	Create(values ...*model.CheckHistory) error
	CreateInBatches(values []*model.CheckHistory, batchSize int) error
	Save(values ...*model.CheckHistory) error
	First() (*model.CheckHistory, error)
	Take() (*model.CheckHistory, error)
	Last() (*model.CheckHistory, error)
	Find() ([]*model.CheckHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CheckHistory, err error)
	FindInBatches(result *[]*model.CheckHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CheckHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICheckHistoryDo
	Assign(attrs ...field.AssignExpr) ICheckHistoryDo
	Joins(fields ...field.RelationField) ICheckHistoryDo
	Preload(fields ...field.RelationField) ICheckHistoryDo
	FirstOrInit() (*model.CheckHistory, error)
	FirstOrCreate() (*model.CheckHistory, error)
	FindByPage(offset int, limit int) (result []*model.CheckHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICheckHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c checkHistoryDo) Debug() ICheckHistoryDo {
	return c.withDO(c.DO.Debug())
}

func (c checkHistoryDo) WithContext(ctx context.Context) ICheckHistoryDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c checkHistoryDo) ReadDB() ICheckHistoryDo {
	return c.Clauses(dbresolver.Read)
}

func (c checkHistoryDo) WriteDB() ICheckHistoryDo {
	return c.Clauses(dbresolver.Write)
}

func (c checkHistoryDo) Session(config *gorm.Session) ICheckHistoryDo {
	return c.withDO(c.DO.Session(config))
}

func (c checkHistoryDo) Clauses(conds ...clause.Expression) ICheckHistoryDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c checkHistoryDo) Returning(value interface{}, columns ...string) ICheckHistoryDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c checkHistoryDo) Not(conds ...gen.Condition) ICheckHistoryDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c checkHistoryDo) Or(conds ...gen.Condition) ICheckHistoryDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c checkHistoryDo) Select(conds ...field.Expr) ICheckHistoryDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c checkHistoryDo) Where(conds ...gen.Condition) ICheckHistoryDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c checkHistoryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICheckHistoryDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c checkHistoryDo) Order(conds ...field.Expr) ICheckHistoryDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c checkHistoryDo) Distinct(cols ...field.Expr) ICheckHistoryDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c checkHistoryDo) Omit(cols ...field.Expr) ICheckHistoryDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c checkHistoryDo) Join(table schema.Tabler, on ...field.Expr) ICheckHistoryDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c checkHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICheckHistoryDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c checkHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) ICheckHistoryDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c checkHistoryDo) Group(cols ...field.Expr) ICheckHistoryDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c checkHistoryDo) Having(conds ...gen.Condition) ICheckHistoryDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c checkHistoryDo) Limit(limit int) ICheckHistoryDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c checkHistoryDo) Offset(offset int) ICheckHistoryDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c checkHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckHistoryDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c checkHistoryDo) Unscoped() ICheckHistoryDo {
	return c.withDO(c.DO.Unscoped())
}

func (c checkHistoryDo) Create(values ...*model.CheckHistory) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c checkHistoryDo) CreateInBatches(values []*model.CheckHistory, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c checkHistoryDo) Save(values ...*model.CheckHistory) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c checkHistoryDo) First() (*model.CheckHistory, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckHistory), nil
	}
}

func (c checkHistoryDo) Take() (*model.CheckHistory, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckHistory), nil
	}
}

func (c checkHistoryDo) Last() (*model.CheckHistory, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckHistory), nil
	}
}

func (c checkHistoryDo) Find() ([]*model.CheckHistory, error) {
	result, err := c.DO.Find()
	return result.([]*model.CheckHistory), err
}

func (c checkHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CheckHistory, err error) {
	buf := make([]*model.CheckHistory, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c checkHistoryDo) FindInBatches(result *[]*model.CheckHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c checkHistoryDo) Attrs(attrs ...field.AssignExpr) ICheckHistoryDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c checkHistoryDo) Assign(attrs ...field.AssignExpr) ICheckHistoryDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c checkHistoryDo) Joins(fields ...field.RelationField) ICheckHistoryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c checkHistoryDo) Preload(fields ...field.RelationField) ICheckHistoryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c checkHistoryDo) FirstOrInit() (*model.CheckHistory, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckHistory), nil
	}
}

func (c checkHistoryDo) FirstOrCreate() (*model.CheckHistory, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckHistory), nil
	}
}

func (c checkHistoryDo) FindByPage(offset int, limit int) (result []*model.CheckHistory, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c checkHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c checkHistoryDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c checkHistoryDo) Delete(models ...*model.CheckHistory) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *checkHistoryDo) withDO(do gen.Dao) *checkHistoryDo {
	c.DO = *do.(*gen.DO)
	return c
}
